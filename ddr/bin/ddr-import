#!/usr/bin/env python

#
# ddr-import
#

description = """Imports new entities or files with data from CSV files."""

epilog = """

#EXAMPLES:
#    ddr-import entity --check /tmp/ddr-import/ddr-test-123-entity-20150123.csv
#    ddr-import entity --user=gjost --mail=gjost@densho.org /tmp/ddr-import/ddr-test-123-entity-20150123.csv /tmp/ddr/ddr-test-123/
#    ddr-import entity --register /tmp/ddr-import/ddr-test-123-entity-20150123.csv


I want to be able to edit the CSV, stick it in a directory

Check integrity of CSV and other stuff:

    $ ddr-import check /path/to/ddr-test-123-entity-new.csv \
      /var/www/media/ddr/ddr-test-123/

Import the entities, disabling checking since we just did it:

    $ ddr-import entity -N -u gjost -m gjost@densho.org \
      /path/to/ddr-test-123-entity-new.csv \
      /var/www/media/ddr/ddr-test-123/

This should
- check CSV file, alert me if problems
- make sure not importing existing entities/files
- check with ID service to make sure IDs available
  (i.e. not trying to register existing ones)
- import data, create new entities/files
- stage changes to git repo

When it's all done I want to run a command to register the new IDs

    $ ddr-import register -Ugjost /path/to/ddr-test-123-entity-new.csv \
      /var/www/media/ddr/ddr-test-123/

This should
- ask for password
- read all the IDs in CSV
- get existing IDs from ID service
- figure out which ones are new
- register new IDs

And then I want to run a command to commit the changes

---"""


import argparse
from datetime import datetime
import getpass
import logging
import os
import sys

from DDR import config
from DDR import batch_import
from DDR import identifier
from DDR import idservice

VOCABS_PATH = os.path.join(config.REPO_MODELS_PATH, 'vocab')
AGENT = 'ddr-import'

logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s %(levelname)-8s %(message)s',
    stream=sys.stdout,
)


def log_error(err):
    """
    @param err: Exception
    """
    logging.error('************************************************************************')
    logging.error(err)
    logging.error('************************************************************************')

def get_idservice_session(args, session=None):
    """Log user in to ID service and return session; prompt if necessary
    
    @param args: argparse.Namespace Output of argparse.ArgumentParser.parse_args()
    @param session: requests.session object
    @returns: requests.session object
    """
    if not session:
        logging.debug('No session--logging in')
        if args.username:
            logging.debug('Username: %s' % args.username)
            username = args.username
        else:
            username = raw_input('Username: ')
        if args.password:
            password = args.password
            dummy = ''.join(['*' for n in args.password])
            logging.debug('Password: %s' % dummy)
        else:
            password = getpass.getpass(prompt='Password: ')
        session = idservice.login(username, password)
    return session


def main():

    parser = argparse.ArgumentParser(description=description, epilog=epilog,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('command', help="Command: 'check', 'entity', 'file', 'register'.")
    parser.add_argument('csv', help='Absolute path to CSV file.')
    parser.add_argument('collection', help='Absolute path to Collection.')
    parser.add_argument('-i', '--idservice', help='URL of ID service, if different from configs.')
    parser.add_argument('-N', '--nocheck', action='store_true', help='Do not run checking/validation (large collections may take time).')
    parser.add_argument('-d', '--dryrun', action='store_true', help="Simulated run-through; don't modify files.")
    parser.add_argument('-u', '--user', help='Git user name (required if importing)')
    parser.add_argument('-m', '--mail', help='Git user e-mail address (required if importing)')
    parser.add_argument('-U', '--username', help='ID service username')
    parser.add_argument('-P', '--password', help='ID service password')
    parser.add_argument('-l', '--log', help='(optional) Log addfile to this path')
    args = parser.parse_args()
    
    # check args
    if not os.path.exists(args.csv):
        print('ddr-import: CSV file does not exist.')
        sys.exit(1)
    if not (os.path.isfile(args.csv) and os.path.isdir(args.collection)):
        print('ddr-import: CSV filename comes before collection.')
        sys.exit(1)
    if not os.path.exists(args.collection):
        print('ddr-import: Collection does not exist.')
        sys.exit(1)
    
    start = datetime.now()
    
    csv_path = os.path.normpath(args.csv)
    collection_path = os.path.normpath(args.collection)
    vocabs_path = os.path.normpath(VOCABS_PATH)

    ci = identifier.Identifier(collection_path)
    logging.debug(ci)
    logging.debug(ci.path_abs())

    session = None
        
    if (args.command == 'check') or (not args.nocheck):
        try:
            session = get_idservice_session(args, session)
            batch_import.check(
                csv_path, ci, vocabs_path, session
            )
        except Exception as err:
            log_error(err)
            sys.exit(1)
    
    if   args.command == 'entity':
        try:
            imported = batch_import.import_entities(
                csv_path,
                ci,
                vocabs_path,
                args.user, args.mail,
                AGENT,
                args.dryrun
            )
        except Exception as err:
            log_error(err)
    
    elif args.command == 'file':
        try:
            imported = batch_import.import_files(
                csv_path,
                ci,
                vocabs_path,
                args.user, args.mail,
                AGENT,
                args.log,
                args.dryrun
            )
        except Exception as err:
            log_error(err)
    
    elif args.command == 'register':
        session = get_idservice_session(args, session)
        try:
            batch_import.register_entity_ids(
                csv_path, ci, session
            )
            logging.info('IF YOU SEE THIS IT WORKED')
        except Exception as err:
            log_error(err)
    
    finish = datetime.now()
    elapsed = finish - start
    logging.info('DONE - %s elapsed' % elapsed)


if __name__ == '__main__':
    main()
