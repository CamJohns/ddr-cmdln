#!/usr/bin/env python

#
# ddr-import
#

description = """Imports new entities or files with data from CSV files."""

epilog = """
EXAMPLES:
    ddr-import entity --check /tmp/ddr-import/ddr-test-123-entity-20150123.csv
    ddr-import entity --user=gjost --mail=gjost@densho.org /tmp/ddr-import/ddr-test-123-entity-20150123.csv /tmp/ddr/ddr-test-123/
    ddr-import entity --register /tmp/ddr-import/ddr-test-123-entity-20150123.csv

---"""


import argparse
from datetime import datetime
import getpass
import logging
import os
import sys

from DDR import batch_import
from DDR import config

VOCABS_PATH = os.path.join(config.REPO_MODELS_PATH, 'vocab')


logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s %(levelname)-8s %(message)s',
    stream=sys.stdout,
)

def main():

    parser = argparse.ArgumentParser(description=description, epilog=epilog,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('model', help='Model.')
    parser.add_argument('csv', help='Absolute path to CSV file.')
    parser.add_argument('collection', help='Absolute path to Collection.')
    parser.add_argument('-i', '--idservice', help='URL of ID service, if different from configs.')
    parser.add_argument('-c', '--check', action='store_true', help='Check if IDs in CSV are available.')
    parser.add_argument('-R', '--register', action='store_true', help='Register IDs in CSV.')
    parser.add_argument('-u', '--user', help='Git user name (required if importing)')
    parser.add_argument('-m', '--mail', help='Git user e-mail address (required if importing)')
    parser.add_argument('-U', '--username', help='ID service username (required if using ID service).')
    parser.add_argument('-P', '--password', help='ID service password (required if using ID service).')
    args = parser.parse_args()
    
    # check args
    if not os.path.exists(args.csv):
        raise Exception('ddr-update: CSV file does not exist.')
    if not (os.path.isfile(args.csv) and os.path.isdir(args.collection)):
        raise Exception('ddr-update: CSV filename comes before collection.')
    if not os.path.exists(args.collection):
        raise Exception('ddr-update: Collection does not exist.')
            
    start = datetime.now()
    
    if args.check:
        assert False

    elif args.register:
        assert False
    
    elif args.model == 'entity':
        imported = batch_import.import_entities(
            args.csv,
            args.collection,
            VOCABS_PATH,
            args.user, args.mail, 'ddr-update'
        )
    
    elif args.model == 'file':
        imported = batch_import.import_files(
            args.csv,
            args.collection,
            VOCABS_PATH,
            args.user, args.mail, 'ddr-update'
        )
    
    finish = datetime.now()
    elapsed = finish - start
    logging.info('DONE - %s elapsed' % elapsed)


if __name__ == '__main__':
    main()
