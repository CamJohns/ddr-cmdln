#!/usr/bin/env python

#
# ddr-import
#

description = """Imports new entities or files with data from CSV files."""

epilog = """

#EXAMPLES:
#    ddr-import entity --check /tmp/ddr-import/ddr-test-123-entity-20150123.csv
#    ddr-import entity --user=gjost --mail=gjost@densho.org /tmp/ddr-import/ddr-test-123-entity-20150123.csv /tmp/ddr/ddr-test-123/
#    ddr-import entity --register /tmp/ddr-import/ddr-test-123-entity-20150123.csv


I want to be able to edit the CSV, stick it in a directory

Check integrity of CSV and other stuff:

    $ ddr-import check /path/to/ddr-test-123-entity-new.csv \
      /var/www/media/ddr/ddr-test-123/

Import the entities, disabling checking since we just did it:

    $ ddr-import entity -N -u gjost -m gjost@densho.org \
      /path/to/ddr-test-123-entity-new.csv \
      /var/www/media/ddr/ddr-test-123/

This should
- check CSV file, alert me if problems
- make sure not importing existing entities/files
- check with ID service to make sure IDs available
  (i.e. not trying to register existing ones)
- import data, create new entities/files
- stage changes to git repo

When it's all done I want to run a command to register the new IDs

    $ ddr-import register -Ugjost /path/to/ddr-test-123-entity-new.csv \
      /var/www/media/ddr/ddr-test-123/

This should
- ask for password
- read all the IDs in CSV
- get existing IDs from ID service
- figure out which ones are new
- register new IDs

And then I want to run a command to commit the changes

---"""


import argparse
from datetime import datetime
import getpass
import logging
import os
import sys
import traceback

from DDR import config
from DDR import batch
from DDR import identifier
from DDR import idservice

VOCABS_PATH = os.path.join(config.REPO_MODELS_PATH, 'vocab')
AGENT = 'ddr-import'

logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s %(levelname)-8s %(message)s',
    stream=sys.stdout,
)


def log_error(err, debug=False):
    """Print Exception message to log, or traceback to console
    
    @param err: Exception
    @param debug: boolean If True, print traceback to console
    """
    if debug:
        print('************************************************************************')
        traceback.print_exc()
        print('************************************************************************')
    else:
        logging.error('************************************************************************')
        logging.error(err)
        logging.error('************************************************************************')

def idservice_api_login(args):
    """Login to ID service, return auth token and user info; prompt if necessary
    
    @param args: argparse.Namespace Output of argparse.ArgumentParser.parse_args()
    @returns: idservice.IDServiceClient
    """
    if args.username:
        logging.debug('Username: %s' % args.username)
        username = args.username
    else:
        username = raw_input('Username: ')
    if args.password:
        password = args.password
        dummy = ''.join(['*' for n in args.password])
        logging.debug('Password: %s' % dummy)
    else:
        password = getpass.getpass(prompt='Password: ')
    
    ic = idservice.IDServiceClient()
    status1,reason1 = ic.login(username, password)
    if status1 != 200:
        logging.error('Login failed[1]: %s %s' % (status1,reason1))
        sys.exit(1)
    return ic


def main():

    parser = argparse.ArgumentParser(description=description, epilog=epilog,
                                     formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('command', help="Command: 'check', 'entity', 'file', 'register'.")
    parser.add_argument('csv', help='Absolute path to CSV file.')
    parser.add_argument('collection', help='Absolute path to Collection.')
    parser.add_argument('-i', '--idservice', help='URL of ID service, if different from configs.')
    parser.add_argument('-N', '--nocheck', action='store_true', help='Do not run checking/validation (large collections may take time).')
    parser.add_argument('-d', '--dryrun', action='store_true', help="Simulated run-through; don't modify files.")
    parser.add_argument('-D', '--debug', action='store_true', help='Print error tracebacks.')
    parser.add_argument('-u', '--user', help='Git user name (required if importing)')
    parser.add_argument('-m', '--mail', help='Git user e-mail address (required if importing)')
    parser.add_argument('-U', '--username', help='ID service username')
    parser.add_argument('-P', '--password', help='ID service password')
    parser.add_argument('-l', '--log', help='(optional) Log addfile to this path')
    args = parser.parse_args()
    
    # ensure we have absolute paths (CWD+relpath)
    csv_path = os.path.abspath(os.path.normpath(args.csv))
    collection_path = os.path.abspath(os.path.normpath(args.collection))
    vocabs_path = os.path.normpath(VOCABS_PATH)
    
    # Check args
    if not os.path.exists(csv_path):
        print('ddr-import: CSV file does not exist.')
        sys.exit(1)
    if not (os.path.isfile(csv_path) and os.path.isdir(collection_path)):
        print('ddr-import: CSV filename comes before collection.')
        sys.exit(1)
    if not os.path.exists(collection_path):
        print('ddr-import: Collection does not exist.')
        sys.exit(1)
    
    start = datetime.now()

    ci = identifier.Identifier(collection_path)
    logging.debug(ci)
    logging.debug(ci.path_abs())
    
    idservice_client = None
    
    if (args.command == 'check') or (not args.nocheck):
        idservice_client = idservice_api_login(args)
        chkcsv = batch.Checker.check_csv(csv_path, ci, vocabs_path)
        chkrepo = batch.Checker.check_repository(ci)
        chkeids = batch.Checker.check_eids(chkcsv['rowds'], ci, idservice_client)
        
        tests = 0
        passed = 0
        def passfail(results, tests, passed):
            tests += 1
            if results['passed']:
                passed += 1
            return tests,passed
        tests,passed = passfail(chkcsv, tests, passed)
        tests,passed = passfail(chkrepo, tests, passed)
        tests,passed = passfail(chkeids, tests, passed)
        if passed != tests:
            logging.error('TESTS FAILED--QUITTING!')
            sys.exit(1)
    
    if   args.command == 'entity':
        try:
            imported = batch.Importer.import_entities(
                csv_path,
                ci,
                vocabs_path,
                args.user, args.mail,
                AGENT,
                args.dryrun
            )
        except Exception as err:
            log_error(err, args.debug)
    
    elif args.command == 'file':
        try:
            imported = batch.Importer.import_files(
                csv_path,
                ci,
                vocabs_path,
                args.user, args.mail,
                AGENT,
                args.log,
                args.dryrun
            )
        except Exception as err:
            log_error(err, args.debug)
    
    elif args.command == 'register':
        idservice_client = idservice_api_login(args)
        try:
            batch.Importer.register_entity_ids(
                csv_path, ci, idservice_client, args.dryrun
            )
            logging.info('IF YOU SEE THIS IT WORKED')
        except Exception as err:
            log_error(err, args.debug)
    
    finish = datetime.now()
    elapsed = finish - start
    logging.info('DONE - %s elapsed' % elapsed)


if __name__ == '__main__':
    main()
