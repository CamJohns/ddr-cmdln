#!/usr/bin/env python
#
# This file is part of ddr-cmdln/ddr
#

DESCRIPTION = """Run command on all multiple collections"""

EPILOG = """

ddr-batch /tmp/basedir listofcollections "ddr-transform /tmp/basedir/COLLECTION"
ddr-batch /tmp/basedir git@mits.densho.org "ddr-transform /tmp/basedir/COLLECTION"

basedir
if not exists(basedir/TODO):
    touch basedir/TODO - list of collections to file
    get list of collections to test
    - from file
    - form Gitolite ("ssh git@mits.densho.org info")
    exclude certain patterns (e.g. "ddr-testing-*")
    write list of collections to TODO

touch basedir/THIS - current collection beign worked on
touch basedir/DONE.csv - list of results
touch basedir/WORK - current logfile

while (collections):
    read list of collections from TODO,
    pop first collection,
    write collection ID to THIS,
    write updated list to TODO
    touch COLLECTION.log
    ln -s COLLECTION.log WORK.log
     
    ddr-xform /tmp/basedir ddr-test-123 current.log
    - clone,
    - save each file,
    - see if it worked, how long it took,
    - commit,
    - see if that worked, how long it took
    - delete
     
    append metrics to DONE


TODO
ddr-densho-12
ddr-densho-13
ddr-densho-14
ddr-densho-15

THIS
ddr-densho-11

WORK
ddr-densho-11.log

DONE.csv
id, verdict, failures, objects, files, elapsed, per
ddr-densho-8, ok, 0, 46, 78, 0:00:37.346138, 0:00:00.818712
ddr-densho-9, FAIL, 8, 64, 87, 0:00:53.461383, 0:00:00.818721
ddr-densho-10, ok, 0, 46, 78, 0:00:37.346138, 0:00:00.811728
"""

from datetime import datetime
import argparse
import logging
import sys

from DDR import config
from DDR import batch

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s %(levelname)-8s %(message)s',
    stream=sys.stdout,
)


def main():
    parser = argparse.ArgumentParser(
        description=DESCRIPTION,
        epilog=EPILOG,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument('user', help='User name (used for commits)')
    parser.add_argument('mail', help='User email (used for commits)')
    parser.add_argument('basedir', help='Absolute path to base dir.')
    parser.add_argument('source', help='Absolute path to list file.')
    args = parser.parse_args()

    start = datetime.now()
    
    data = batch.Updater.update_multi(args.basedir, args.source, args.user, args.mail)
    logging.info('collections:   %s' % data['collections'])
    logging.info('successful:    %s' % data['successful'])
    logging.info('objects saved: %s' % data['objects_saved'])
    logging.info('files updated: %s' % data['files_updated'])
    logging.info('failures       %s' % data['failures'])
    
    deltas = [delta.total_seconds() for delta in data['per_objects']]
    if len(deltas) and sum(deltas):
        avg = sum(deltas) / len(deltas)
        logging.info('avg s/object %s' % avg)
    
    finish = datetime.now()
    elapsed = finish - start
    logging.info('DONE - %s elapsed' % elapsed)


if __name__ == '__main__':
    main()
