#!/usr/bin/env python
#
# ddr-search
#
#

description = """Tools for managing DDR metadata in ElasticSearch."""

subparser_title = """Subcommands"""
subparser_description = """Additional help is available for each of the following subcommands.
Example:
    $ ddrindex status --help
"""
subparser_help = ''

epilog = """
Example usage:

    # Create and delete indexes
    $ ddrindex index -H localhost:9200 -i documents --create
    $ ddrindex index -H localhost:9200 -i documents --remove
    
    # Add/update mappings
    $ ddrindex mappings -H localhost:9200 -i documents -p /var/www/media/base/ddr/docstore/mappings.json
    
    # Add/update facets
    $ ddrindex facets -H localhost:9200 -i documents -p /var/www/media/base/ddr/vocab/

    # Add/update base repository info:
    $ ddrindex repo -H localhost:9200 -i documents -p /var/www/media/base/REPO/repository.json

    # Add or remove metadata for organizations:
    $ ddrindex org -H localhost:9200 -i documents -p /var/www/media/base/REPO-ORG/organization.json
    $ ddrindex org -H localhost:9200 -i documents -p /var/www/media/base/REPO-ORG/organization.json --remove
    
    # Index a collection for ddr-local
    $ ddrindex index -H localhost:9200 -i documents -p /var/www/media/base/ddr-testing-123 --recursive
    
    # Index a whole directory of collections for ddr-local
    $ ddrindex index -H localhost:9200 -i documents -p /var/www/media/base --recursive
    
    # Index a whole directory of collections for ddr-public
    $ ddrindex index -H localhost:9200 -i documents -p /var/www/media/base --recursive --newstyle
    """


import argparse
import ConfigParser
from datetime import datetime
import json
import logging
import os
import sys

import envoy
import git

from DDR import CONFIG_FILES, NoConfigError
from DDR import docstore
from DDR import models

config = ConfigParser.ConfigParser()
configs_read = config.read(CONFIG_FILES)
if not configs_read:
    raise NoConfigError('No config file!')

DEBUG = config.get('local','debug')

LOGGING_FORMAT = '%(asctime)s %(levelname)s %(message)s'
LOGGING_DATEFMT = '%Y-%m-%d %H:%M:%S'
LOGGING_FILE = config.get('local','log_file')
if config.get('local','log_level') == 'debug':
    LOGGING_LEVEL = logging.DEBUG
else:
    LOGGING_LEVEL = logging.ERROR
#logging.basicConfig(format=LOGGING_FORMAT, datefmt=LOGGING_DATEFMT, level=LOGGING_LEVEL, filename=LOGGING_FILE)
logging.basicConfig(format=LOGGING_FORMAT, datefmt=LOGGING_DATEFMT, level=logging.DEBUG, filename=LOGGING_FILE)

def split_docstring(func):
    """Split function docstring into description and epilog, removing params.
    """
    description = ''
    lines = [l.rstrip().replace('    ','',1) for l in func.__doc__.split('\n')]
    if lines:
        description = lines.pop(0)
    e = [l for l in lines if l.strip() and ('@param' not in l) and ('@return' not in l)]
    epilog = '\n'.join(e)
    return description,epilog

def make_hosts( text ):
    hosts = []
    for host in text.split(','):
        h,p = host.split(':')
        hosts.append( {'host':h, 'port':p} )
    return hosts


def main():

    formatter = argparse.RawDescriptionHelpFormatter
    parser = argparse.ArgumentParser(description=description, epilog=epilog,
                                     formatter_class=formatter,)
    
    subparsers = parser.add_subparsers(
        dest='cmd',
        title=subparser_title,
        description=subparser_description,
        help=subparser_help)
    
#    post_descr,post_epilog = split_docstring(docstore.post)
#    get_descr,get_epilog = split_docstring(docstore.get)
    index_descr,index_epilog = split_docstring(docstore.index)
    alias_descr,alias_epilog = split_docstring(docstore.set_alias)
    mappings_descr,mappings_epilog = split_docstring(docstore.put_mappings)
    facets_descr,facets_epilog = split_docstring(docstore.put_facets)
    exists_descr,exists_epilog = split_docstring(docstore.exists)
    repo_descr,repo_epilog = split_docstring(docstore.repo)
    org_descr,org_epilog = split_docstring(docstore.org)
    delete_descr,delete_epilog = split_docstring(docstore.delete)
    
#    post_parser = subparsers.add_parser('post', description=post_descr, epilog=post_epilog, formatter_class=formatter,)
#    get_parser = subparsers.add_parser('get', description=get_descr, epilog=get_epilog, formatter_class=formatter,)
    index_parser = subparsers.add_parser('index', description=index_descr, epilog=index_epilog, formatter_class=formatter,)
    alias_parser = subparsers.add_parser('alias', description=alias_descr, epilog=alias_epilog, formatter_class=formatter,)
    mappings_parser = subparsers.add_parser('mappings', description=mappings_descr, epilog=mappings_epilog, formatter_class=formatter,)
    facets_parser = subparsers.add_parser('facets', description=facets_descr, epilog=facets_epilog, formatter_class=formatter,)
    exists_parser = subparsers.add_parser('exists', description=exists_descr, epilog=exists_epilog, formatter_class=formatter,)
    repo_parser = subparsers.add_parser('repo', description=repo_descr, epilog=repo_epilog, formatter_class=formatter,)
    org_parser = subparsers.add_parser('org', description=org_descr, epilog=org_epilog, formatter_class=formatter,)
    delete_parser = subparsers.add_parser('delete', description=delete_descr, epilog=delete_epilog, formatter_class=formatter,)
    
#    post_parser.set_defaults(func=docstore.post)
#    get_parser.set_defaults(func=docstore.get)
    index_parser.set_defaults(func=docstore.index)
    alias_parser.set_defaults(func=docstore.set_alias)
    mappings_parser.set_defaults(func=docstore.put_mappings)
    facets_parser.set_defaults(func=docstore.put_facets)
    exists_parser.set_defaults(func=docstore.exists)
    repo_parser.set_defaults(func=docstore.repo)
    org_parser.set_defaults(func=docstore.org)
    delete_parser.set_defaults(func=docstore.delete)
    
#    post_parser.add_argument('-d', '--debug', action='store_true', help='Debug; prints lots of debug info.')
#    post_parser.add_argument('-l', '--log', help='Log file..')
#    post_parser.add_argument('-H', '--host', required=True, help='Hostname and port (HOST:PORT).')
#    post_parser.add_argument('-i', '--index', required=True, help='index.')
#    post_parser.add_argument('-p', '--path', required=True, help='Absolute path to JSON file.')
    
#    get_parser.add_argument('-d', '--debug', action='store_true', help='Debug; prints lots of debug info.')
#    get_parser.add_argument('-l', '--log', help='Log file..')
#    get_parser.add_argument('-H', '--host', required=True, help='Hostname and port (HOST:PORT).')
#    get_parser.add_argument('-i', '--index', required=True, help='index.')
#    get_parser.add_argument('-m', '--model', required=True, help='model.')
#    get_parser.add_argument('-I', '--id', required=True, help='ID.')
    
    index_parser.add_argument('-d', '--debug', action='store_true', help='Debug; prints lots of debug info.')
    index_parser.add_argument('-l', '--log', help='Log file..')
    index_parser.add_argument('-H', '--host', required=True, help='Hostname and port (HOST:PORT).')
    index_parser.add_argument('-i', '--index', required=True, help='index.')
    index_parser.add_argument('-p', '--path', help='Absolute path to directory containing metadata file(s).')
    index_parser.add_argument('-r', '--recursive', action='store_true', help='Recurse into subdirectories.')
    index_parser.add_argument('-P', '--public', action='store_true', help='For publication (fields not marked public will be omitted.')
    index_parser.add_argument('-C', '--create', action='store_true', help='Create a new index.')
    index_parser.add_argument('-R', '--remove', action='store_true', help='Remove the index.')
    
    alias_parser.add_argument('-d', '--debug', action='store_true', help='Debug; prints lots of debug info.')
    alias_parser.add_argument('-l', '--log', help='Log file..')
    alias_parser.add_argument('-H', '--host', required=True, help='Hostname and port (HOST:PORT).')
    alias_parser.add_argument('-i', '--index', required=True, help='Name of index.')
    alias_parser.add_argument('-a', '--alias', help='Alias.')
    alias_parser.add_argument('-R', '--remove', action='store_true', help='Remove the alias.')
    
    mappings_parser.add_argument('-d', '--debug', action='store_true', help='Debug; prints lots of debug info.')
    mappings_parser.add_argument('-l', '--log', help='Log file..')
    mappings_parser.add_argument('-H', '--host', required=True, help='Hostname and port (HOST:PORT).')
    mappings_parser.add_argument('-i', '--index', required=True, help='index.')
    mappings_parser.add_argument('-p', '--path', required=True, help='Absolute path to mappings.json file.')
    
    facets_parser.add_argument('-d', '--debug', action='store_true', help='Debug; prints lots of debug info.')
    facets_parser.add_argument('-l', '--log', help='Log file..')
    facets_parser.add_argument('-H', '--host', required=True, help='Hostname and port (HOST:PORT).')
    facets_parser.add_argument('-i', '--index', required=True, help='index.')
    facets_parser.add_argument('-p', '--path', required=True, help='Absolute path to facets directory.')
    
    exists_parser.add_argument('-d', '--debug', action='store_true', help='Debug; prints lots of debug info.')
    exists_parser.add_argument('-l', '--log', help='Log file..')
    exists_parser.add_argument('-H', '--host', required=True, help='Hostname and port (HOST:PORT).')
    exists_parser.add_argument('-i', '--index', required=True, help='index.')
    exists_parser.add_argument('-m', '--model', required=True, help='model.')
    exists_parser.add_argument('-I', '--id', required=True, help='Document ID.')
    
    repo_parser.add_argument('-d', '--debug', action='store_true', help='Debug; prints lots of debug info.')
    repo_parser.add_argument('-l', '--log', help='Log file..')
    repo_parser.add_argument('-H', '--host', required=True, help='Hostname and port (HOST:PORT).')
    repo_parser.add_argument('-i', '--index', required=True, help='index.')
    repo_parser.add_argument('-p', '--path', required=True, help='Absolute path to repository.json file.')
    
    org_parser.add_argument('-d', '--debug', action='store_true', help='Debug; prints lots of debug info.')
    org_parser.add_argument('-l', '--log', help='Log file..')
    org_parser.add_argument('-H', '--host', required=True, help='Hostname and port (HOST:PORT).')
    org_parser.add_argument('-i', '--index', required=True, help='index.')
    org_parser.add_argument('-p', '--path', required=True, help='Absolute path to organization.json file.')
    org_parser.add_argument('-R', '--remove', action='store_true', help='Remove the organization.')
    
    delete_parser.add_argument('-d', '--debug', action='store_true', help='Debug; prints lots of debug info.')
    delete_parser.add_argument('-l', '--log', help='Log file..')
    delete_parser.add_argument('-H', '--host', required=True, help='Hostname and port (HOST:PORT).')
    delete_parser.add_argument('-i', '--index', required=True, help='index.')
    delete_parser.add_argument('-I', '--id', required=True, help='Document ID.')
    delete_parser.add_argument('-r', '--recursive', action='store_true', help='Delete children of this document.')
    
    args = parser.parse_args()
    
    if args.debug:
        print(args)
    
    hosts = make_hosts( args.host )
    
    if args.log and (os.path.exists(args.log) or os.path.exists(os.path.basename(args.log))):
        logging.basicConfig(format=LOGGING_FORMAT, datefmt=LOGGING_DATEFMT, level=logging.DEBUG, filename=args.log)
    
    # call selected function
    exit = 0
    if args.cmd == 'post':
        with open(args.path, 'r') as f:
            document = json.loads(f.read())
        msg = docstore.post(hosts, args.index, document)
        print(msg)
    elif args.cmd == 'get':
        msg = docstore.get(hosts, args.index, args.model, args.id)
        print(msg)
    elif args.cmd == 'index' and args.create:
        results = docstore.create_index(hosts, args.index)
    elif args.cmd == 'index' and args.remove:
        results = docstore.delete_index(hosts, args.index)
    elif args.cmd == 'index':
        start = datetime.now()
        results = docstore.index(hosts, args.index, args.path,
                                 recursive=args.recursive, public=args.public)
        end = datetime.now()
        elapsed = end - start
        if results['bad']:
            print('------------------------------------------------------------------------')
            print('The following paths had problems:\n')
            for path,status,response in results['bad']:
                print(' -- '.join([str(status), path, response]))
        print('------------------------------------------------------------------------')
        print('ES host/index:   %s/%s' % (hosts, args.index))
        print('Path:            %s' % args.path)
        print('Recursive:       %s' % args.recursive)
        print('Files processed: %s' % results['total'])
        print('Successful:      %s' % results['successful'])
        print('Errors:          %s' % len(results['bad']))
        print('Time elapsed:    %s' % elapsed)
    elif args.cmd == 'alias':
        msg = docstore.set_alias(hosts, args.alias, args.index, args.remove)
        print(msg)
    elif args.cmd == 'mappings':
        msg = docstore.put_mappings(hosts, args.index, args.path, models.MODELS_DIR)
        print(msg)
    elif args.cmd == 'facets':
        msg = docstore.put_facets(hosts, args.index, args.path)
        print(msg)
    elif args.cmd == 'exists':
        msg = docstore.exists(hosts, args.index, args.model, args.id)
        print(msg)
    elif args.cmd == 'repo':
        msg = docstore.repo(hosts, args.index, args.path)
        print(msg)
    elif args.cmd == 'org':
        msg = docstore.org(hosts, args.index, args.path, args.remove)
        print(msg)
    elif args.cmd == 'delete':
        msg = docstore.delete(hosts, args.index, args.id, recursive=args.recursive)
        print(msg)
    
    if exit:
        print(msg)
    sys.exit(exit)


if __name__ == '__main__':
    main()
