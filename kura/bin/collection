#!/usr/bin/env python
#
# This file is part of ddr-cmdln/kura
#

import argparse
import logging
import os
import sys

from Kura.commands import OPERATIONS, description, epilog
from Kura.commands import create, clone, destroy, update, sync
from Kura.commands import status, annex_status
from Kura.commands import entity_create, entity_destroy, entity_update, entity_annex_add
from Kura.commands import annex_push, annex_pull

LOGGING_FORMAT = '%(asctime)s %(levelname)s %(message)s'
LOGGING_DATEFMT = '%Y-%m-%d %H:%M:%S'
LOGGING_FILE = '/tmp/ddr-cmdln.log'

def main():
    parser = argparse.ArgumentParser(description=description, epilog=epilog)
    # no positional arguments
    parser.add_argument('operation', choices=OPERATIONS,
                        help='Operation to perform.')
    parser.add_argument('-c', '--collection',
                        help='Absolute file path to the collection')
    parser.add_argument('-e', '--entity',
                        help='UID of entity to be added/removed to/from collection.')
    parser.add_argument('-f', '--file',
                        help='Relative path to updated file.')
    parser.add_argument('-i', '--cid',
                        help='Collection UID (for clone)')
    parser.add_argument('--dest',
                        help='Destination path (for clone)')
    parser.add_argument('-u', '--user',
                        help='User who is performing the change.')
    parser.add_argument('-m', '--mail',
                        help='Email of user.')
    parser.add_argument('-l', '--log',
                        help='Log file..')
    parser.add_argument('-d', '--debug', action='store_true',
                        help='Debug; prints lots of debug info.')
    args = parser.parse_args()
    
    if args.log and (os.path.exists(args.log) or os.path.exists(os.path.basename(args.log))):
        logging.basicConfig(format=LOGGING_FORMAT, datefmt=LOGGING_DATEFMT, level=logging.DEBUG, filename=args.log)
    
    messages = []
    if not args.operation:
        messages.append('choose an operation')
    if (not args.operation in ['clone']) and (not args.collection):
        messages.append('specify a collection')
    if args.operation not in ['status', 'astatus', 'push', 'pull',]:
        if not args.user:
            messages.append('specify a user')
        if not args.mail:
            messages.append('specify an email address')
    if (args.operation in ['add', 'update', 'eupdate', 'eadd', 'pull',]) and not (args.file):
        messages.append('specify an file')
    if (args.operation in ['ecreate','edestroy','eupdate', 'eadd']) and not (args.entity):
        messages.append('specify an entity')
    if (args.operation in ['eupdate','eadd']) and not (args.file):
        messages.append('specify a file')
    if (args.operation in ['clone']) and not (args.cid):
        messages.append('specify a collection UID')
    if (args.operation in ['clone']) and not (args.dest):
        messages.append('specify a destination path')
    if messages:
        for m in messages:
            sys.stderr.write('ERR: {}\n'.format(m))
        sys.exit(1)
    
    # do something
    if   args.operation == 'status':
        exit,msg = status(args.collection)
        print(msg)
    elif args.operation == 'astatus':
        exit,msg = annex_status(args.collection)
        print(msg)
    elif args.operation == 'create':   exit,msg = create(        args.user, args.mail, args.collection)
    elif args.operation == 'clone':    exit,msg = clone(         args.user, args.mail, args.cid, args.dest)
    elif args.operation == 'destroy':  exit,msg = destroy(       args.user, args.mail, args.collection)
    elif args.operation == 'update':   exit,msg = update(        args.user, args.mail, args.collection, [args.file])
    elif args.operation == 'sync':     exit,msg = sync(          args.user, args.mail, args.collection)
    elif args.operation == 'ecreate':  exit,msg = entity_create( args.user, args.mail, args.collection, args.entity)
    elif args.operation == 'edestroy': exit,msg = entity_destroy(args.user, args.mail, args.collection, args.entity)
    elif args.operation == 'eupdate':  exit,msg = entity_update( args.user, args.mail, args.collection, args.entity, [args.file])
    elif args.operation == 'eadd':     exit,msg = entity_annex_add(args.user,args.mail,args.collection, args.entity, args.file)
    elif args.operation == 'push':     exit,msg = annex_push(args.collection, args.file)
    elif args.operation == 'pull':     exit,msg = annex_pull(args.collection, args.file)
    else:                              exit,msg = 1,'We fell through!\n'
    
    # Done
    if exit:
        print(msg)
    sys.exit(exit)

if __name__ == '__main__':
    main()
